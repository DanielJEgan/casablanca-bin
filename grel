#!/bin/bash

source gitlib.sh

verifyNoUncommittedChanges
verifyNoUnpushedCommits
verifyHeadIsNotDetached
ORIG_BRANCH=`git branch| grep '^\* '|sed 's/\* //'`

# Get the version
RELEASE_VERSION=`printNextVersion`
verifyLocalTagDoesNotExist "v$RELEASE_VERSION"

# Get the last release candidate number
LAST_RELEASE_CANDIDATE_NUMBER=`git tag|egrep '^v'$RELEASE_VERSION'_rc[0-9]+$'|sed 's/v'$RELEASE_VERSION'_rc/'/|sort|tail -n 1`

if [ "$LAST_RELEASE_CANDIDATE_NUMBER" = "" ]
then
    echo
    echo "ERROR: There are no release candidates for $RELEASE_VERSION"
    echo
    exit 1
else
    RELEASE_CANDIDATE_VERSION="$RELEASE_VERSION""_rc""$LAST_RELEASE_CANDIDATE_NUMBER"
fi

confimBeforeProceeding "   Do you wish to create release $RELEASE_VERSION from release candidate $RELEASE_CANDIDATE_VERSION (y/n) ?"

# Create a POM version modified and tagged version on a temp branch then return to original branch
TEMP_BRANCH="v$RELEASE_VERSION""_tmpBranch"
checkout "v$RELEASE_CANDIDATE_VERSION"
checkoutOnANewBranch $TEMP_BRANCH
updatePomfileVersions $RELEASE_VERSION
addAllModificationsAndCommitWithMessage "v"$RELEASE_VERSION
tagAndPushTagToOrigin v$RELEASE_VERSION
checkout $ORIG_BRANCH
deleteBranch $TEMP_BRANCH

# Update POM version to snapshot version after confirmation
MINOR_RELEASE=`echo $RELEASE_VERSION|sed 's/.*\.//'`
NEXT_SNAPSHOT_VERSION=`echo $RELEASE_VERSION|sed 's/[^.]*$//'`$(($MINOR_RELEASE + 1))-SNAPSHOT
confimBeforeProceeding "   Do you wish to update the POM version to $NEXT_SNAPSHOT_VERSION on the $ORIG_BRANCH branch (y/n) ?"
updatePomfileVersions $NEXT_SNAPSHOT_VERSION
addAllModificationsAndCommitWithMessage "Updating poms for $NEXT_SNAPSHOT_VERSION development"
git push -q

echo
